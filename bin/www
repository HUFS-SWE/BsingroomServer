#!/usr/bin/env node
require('dotenv').config();
/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('bsingroomserver:server');
var http = require('http');
var SocketIO = require('socket.io')
const { instrument } = require("@socket.io/admin-ui");
const { set } = require('../app');
const { SocketAddress } = require('net');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var wsServer = SocketIO(server,{
  cors: {
    origin: ["http://localhost:9000","http://localhost:3030","https://admin.socket.io" ],
    methods: ["GET", "POST"],
    credentials: true
  }
});
instrument(wsServer, {
  auth: false
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * socket Connection.
 */

const arrNick = new Set();

 wsServer.on('connection',(socket)=>{

  //All event
  socket.onAny((event)=>{   //모든 이벤트 감시
    console.log(event)
  });

  //Socket connection event
  socket.on("disconnect", () => {   //소켓 이탈 시 유저 삭제
    arrNick.forEach((client)=>{
      if (client.id==socket.id)
      arrNick.delete(client)
    })
    console.log(arrNick)
  });

  socket.on("getNickname",(data, userIcon)=>{   //소켓 접속 시 유저 추가
    let defined = false;
    arrNick.forEach((client)=>{
      if(client.id==socket.id)
      defined = true;
    })
    if(!defined){
      arrNick.add({id : socket.id, nickname : data, icon : userIcon})
    }
    console.log(arrNick)
  })

  //Room event
  socket.on("fetchRoom", ()=>{            //룸 리스트 업데이트
    const rooms = wsServer.sockets.adapter.rooms.keys()
    console.log('rooms', rooms)
    let arr = []
    for (const item of rooms) {
      console.log('item', item)
      var room = wsServer.sockets.adapter.rooms.get(item)
      console.log('room', room)
      let leng = Object.keys(room).length
      console.log('leng', leng)
      arr.push({item, leng})
    }
    console.log(arr)
    console.log(Array.from(wsServer.sockets.adapter.rooms.keys()))
    socket.emit('showRoomList', arr)
  })

  socket.on("fetchMember", (roomName)=>{  //룸 접속 유저 업데이트
    const clients = wsServer.sockets.adapter.rooms.get(roomName);
    const clientList = [...clients]

    let arr = [];
    for(var i=0; i<clientList.length; ++i){
        arrNick.forEach((client)=>{
          if(client.id==clientList[i]){
            arr.push(client)
          }
        })
      }
    console.log(arr);
    socket.to(roomName).emit("showMemberList", arr, false);
    wsServer.to(socket.id).emit("showMemberList", arr, true);
  })

  socket.on('joinRoom',(roomName)=>{      //룸 접속
    socket.join(roomName)
  })

  wsServer.sockets.adapter.on("create-room", (room) => {    //룸 생성 시
    socket.emit('showRoomList',Array.from(wsServer.sockets.adapter.rooms.keys()))
  });

  wsServer.sockets.adapter.on("delete-room", (room) => {    //룸 제거 시
    socket.emit('showRoomList',Array.from(wsServer.sockets.adapter.rooms.keys()))
  });
  

  socket.on('leaveRoom',(roomName, host)=>{   //룸 나가기
    if(host){
      socket.to(roomName).emit("breakRoom")
    }
    const clients = wsServer.sockets.adapter.rooms.get(roomName);
    const clientList = [...clients]

    let arr = [];
    for(var i=0; i<clientList.length; ++i){
        arrNick.forEach((client)=>{
          if(client.id==clientList[i]&&client.id!=socket.id){
            arr.push(client)
          }
        })
      }
    console.log(arr);
    socket.to(roomName).emit("showMemberList", arr, false);
    wsServer.to(socket.id).emit("showMemberList", arr, true);
    setTimeout(() => {
      socket.leave(roomName)
    }, 100);
    
  })
  

  //audio event
  socket.on('offer',(offer, receiverID)=>{
    wsServer.to(receiverID).emit("offer",offer,socket.id);
  })

  socket.on("answer", (answer, receiverID)=>{
    wsServer.to(receiverID).emit("answer",answer, socket.id);
  })

  socket.on("ice", (ice, receiverID)=>{
    wsServer.to(receiverID).emit("ice",ice, socket.id);
  })

  //Chat event
  
  socket.on('sendChat',(roomName,chat)=>{
    let nickname = ''
    arrNick.forEach((client)=>{
      if (client.id==socket.id)
      nickname = client.nickname
    })
    console.log(nickname)
    const content = nickname+': '+chat;
    console.log(content)
    wsServer.to(roomName).emit('showChat', content);
  })

  //singRoom event
  socket.on("createReserv", (roomName,senderID, title, url)=>{
    wsServer.to(roomName).emit('showReservedSong',senderID, title, url);
  })

  socket.on("playSong", (roomName, data)=>{
    wsServer.to(roomName).emit('playReservedSong', data);
  })

  socket.on("setStop",(roomName)=>{
    wsServer.to(roomName).emit('setPlayingStop');
  })
 

})


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
